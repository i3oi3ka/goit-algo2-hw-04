import networkx as nx
import matplotlib.pyplot as plt

from bfs import edmonds_karp

# Створюємо граф
G = nx.DiGraph()

# Додаємо ребра з пропускною здатністю
edges = [
    (0, 2, 25),  # Термінал 1 -> Склад 1
    (0, 3, 20),  # Термінал 1 -> Склад 2
    (0, 4, 15),  # Термінал 1 -> Склад 3
    (1, 4, 15),  # Термінал 2 -> Склад 3
    (1, 5, 30),  # Термінал 2 -> Склад 4
    (1, 3, 15),  # Термінал 2 -> Склад 2
    (2, 6, 15),  # Склад 1 -> Магазин 1
    (2, 7, 10),  # Склад 1 -> Магазин 2
    (2, 8, 20),  # Склад 1 -> Магазин 3
    (3, 9, 15),  # Склад 2 -> Магазин 4
    (3, 10, 10),  # Склад 2 -> Магазин 5
    (3, 11, 25),  # Склад 2 -> Магазин 6
    (4, 12, 20),  # Склад 3 -> Магазин 7
    (4, 13, 15),  # Склад 3 -> Магазин 8
    (4, 14, 10),  # Склад 3 -> Магазин 9
    (5, 15, 20),  # Склад 4 -> Магазин 10
    (5, 16, 10),  # Склад 4 -> Магазин 11
    (5, 17, 15),  # Склад 4 -> Магазин 12
    (5, 18, 5),  # Склад 4 -> Магазин 13
    (5, 19, 10),  # Склад 4 -> Магазин 14
]

# Додаємо всі ребра до графа
G.add_weighted_edges_from(edges)

# Позиції для малювання графа
pos = {
    0: (1, 2),  # Термінал 1
    1: (5, 2),  # Термінал 2
    2: (2, 3),  # Склад 1
    3: (4, 3),  # Склад 2
    4: (2, 1),  # Склад 3
    5: (4, 1),  # Склад 4
    6: (0, 4),  # Магазин 1
    7: (1, 4),  # Магазин 2
    8: (2, 4),  # Магазин 3
    9: (3, 4),  # Магазин 4
    10: (4, 4),  # Магазин 5
    11: (5, 4),  # Магазин 6
    12: (0, 0),  # Магазин 7
    13: (1, 0),  # Магазин 8
    14: (2, 0),  # Магазин 9
    15: (3, 0),  # Магазин 10
    16: (4, 0),  # Магазин 11
    17: (5, 0),  # Магазин 12
    18: (6, 0),  # Магазин 13
    19: (7, 0),  # Магазин 14
}

# Малюємо граф
plt.figure(figsize=(10, 6))
nx.draw(
    G,
    pos,
    with_labels=True,
    node_size=2000,
    node_color="skyblue",
    font_size=12,
    font_weight="bold",
    arrows=True,
)
labels = nx.get_edge_attributes(G, "weight")
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

# Відображаємо граф
plt.show()

# Матриця пропускної здатності для каналів у мережі (capacity_matrix)
capacity_matrix = [
    [0, 0, 25, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Термінал 1
    [0, 0, 0, 15, 15, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Термінал 2
    [0, 0, 0, 0, 0, 0, 15, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Склад 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 10, 25, 0, 0, 0, 0, 0, 0, 0, 0],  # Склад 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 15, 10, 0, 0, 0, 0, 0],  # Склад 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 10, 15, 5, 10],  # Склад 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # Магазин 14
]

print("--Термінал--|---Магазин---|--Фактичний потік--|")
for i in range(1, 15):
    print(
        f"Термінал 1  |  Магазин {i:02d} | {edmonds_karp(capacity_matrix, 0, i+5):02d}"
    )

for i in range(1, 15):
    print(
        f"Термінал 2  |  Магазин {i:02d} | {edmonds_karp(capacity_matrix, 1, i+5):02d}"
    )


source, sink = 20, 21

# Джерело -> термінали з реальною потужністю
G.add_edge(source, 0, capacity=60)  # Термінал 1
G.add_edge(source, 1, capacity=60)  # Термінал 2

# Магазини -> стік з максимально можливою сумою
for i in range(6, 20):
    G.add_edge(i, sink, capacity=120)

flow_value, flow_dict = nx.maximum_flow(G, source, sink, capacity="capacity")

print("Максимальний потік:", flow_value)

# Формуємо таблицю "Термінал → Магазин"
print("--Термінал--|---Магазин---|--Фактичний потік--|")

for terminal in [0, 1]:
    for warehouse, flow_to_wh in flow_dict[terminal].items():
        if flow_to_wh > 0:  # з терміналу в склад пішов потік
            for store, flow_to_store in flow_dict[warehouse].items():
                if flow_to_store > 0:  # зі складу в магазин пішов потік
                    actual_flow = min(flow_to_wh, flow_to_store)
                    if actual_flow > 0:
                        print(
                            f"Термінал {terminal+1} | Магазин {store-5:02d} | {actual_flow}"
                        )
